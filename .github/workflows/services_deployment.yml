name: Build and Deploy Services to AWS

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

env:
  AWS_ACCOUNT_ID: 211125707335
  AWS_REGION: ap-northeast-1
  ECS_DOCKER_ARCHITECTURE: linux/amd64
  ENV_SHORT: prod
  ECR_REPOSITORY: how-to-sea-prod
  ECS_CLUSTER_NAME: how-to-sea-prod

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: Production
    strategy:
      matrix:
        service:
          - name: nginx-proxy
            service_name: nginx-proxy
            img_name: nginx-proxy
            img_tag: latest
            working_dir: ./nginx
            env_vars:
              DNS_ADDRESS: ${{ vars.NGINX_DNS_ADDRESS }}
              AUTH_HOSTNAME: ${{ vars.NGINX_AUTH_HOSTNAME }}
              LOCATION_HOSTNAME: ${{ vars.NGINX_LOCATION_HOSTNAME }}
              LAMBDA_API_URL: ${{ vars.LAMBDA_API_URL }}
          - name: location
            service_name: location
            img_name: location
            img_tag: latest
            working_dir: ./location
            env_vars:
              MONGODB_USER: ${{ vars.LOCATION_MONGODB_USER }}
              MONGODB_DB_NAME: ${{ vars.LOCATION_MONGODB_DB_NAME }}
            # We will handle secrets separately
    defaults:
      run:
        working-directory: ${{ matrix.service.working_dir }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create .env file
        shell: bash
        run: |
          touch .env
          # Write non-secret environment variables
          {% for key, value in matrix.service.env_vars.items() %}
          echo "{{ key }}={{ value }}" >> .env
          {% endfor %}
          
          # Handle secrets separately
          if [ "${{ matrix.service.name }}" == "location" ]; then
            echo "MONGODB_PW=${{ secrets.LOCATION_MONGODB_PW }}" >> .env
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build --platform ${{ env.ECS_DOCKER_ARCHITECTURE }} --build-arg ENV_FILE=.env \
            -t ${{ matrix.service.img_name }}:${{ matrix.service.img_tag }} -f ./Dockerfile .

      - name: Tag Docker image
        run: |
          ECR_ROOT=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker tag ${{ matrix.service.img_name }}:${{ matrix.service.img_tag }} \
            ${ECR_ROOT}/${{ env.ECR_REPOSITORY }}:${{ matrix.service.img_name }}-${{ matrix.service.img_tag }}

      - name: Push Docker image to ECR
        run: |
          ECR_ROOT=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          docker push ${ECR_ROOT}/${{ env.ECR_REPOSITORY }}:${{ matrix.service.img_name }}-${{ matrix.service.img_tag }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --service ${{ matrix.service.service_name }} \
            --region ${{ env.AWS_REGION }} \
            --force-new-deployment